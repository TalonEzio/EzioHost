@page "/video"
@attribute [Authorize]
@rendermode InteractiveServer

<table class="table table-hover">

    <thead>
        <tr>
            <th>Title</th>
            <th>Type</th>
            <th>Status</th>
            <th>Share</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var video in Videos)
        {
            <tr>
                <td>
                    <InputText @bind-Value="video.Title" class="form-control" />
                </td>
                <td>
                    <InputSelect class="form-select" @bind-Value="@video.Type">
                        @foreach (var value in Enum.GetValues<VideoEnum.VideoType>())
                        {
                            <option value="@value">@value.GetDescription()</option>
                        }
                    </InputSelect>
                </td>
                <td>@video.Status.GetDescription()</td>
                <td>
                    <InputSelect class="form-select" @bind-Value="@video.ShareType">
                        @foreach (var value in Enum.GetValues<VideoEnum.VideoShareType>())
                        {
                            <option value="@value">@value.GetDescription()</option>
                        }
                    </InputSelect>
                </td>
                <td>
                    <div class="btn-group" role="group" aria-label="Action">
                        <button type="button" class="btn btn-primary text-white" @onclick="() => PlayVideo(video)" disabled="@(video.Status != VideoEnum.VideoStatus.Ready)">Play</button>
                        <button type="button" class="btn btn-success">
                            @{
                                var shareUrl = $"/video-share/{video.Id}";
                            }
                            <NavLink href="@shareUrl" target="_blank" class=" text-white link-offset-2 link-offset-3-hover link-underline link-underline-opacity-0 link-underline-opacity-75-hover">Share</NavLink>
                        </button>
                        <button type="button" class="btn btn-info text-white" @onclick="() => UpdateVideo(video)">Update</button>
                        <button type="button" class="btn btn-danger text-white" @onclick="() => DeleteVideo(video)">Delete</button>
                    </div>
                </td>
            </tr>


        }
    </tbody>
</table>

<div class="row d-flex justify-content-center">
    <div class="col-6">
        <div id="player"></div>
    </div>
</div>


@code {
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] public HttpClient Http { get; set; } = null!;
    private List<VideoDto> Videos { get; set; } = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Videos = await Http.GetFromJsonAsync<List<VideoDto>>("api/Video") ?? [];
            StateHasChanged();
        }
    }


    private async Task PlayVideo(VideoDto video)
    {
        await JsRuntime.InvokeVoidAsync("playVideo", "player", video.M3U8Location);
    }

    private async Task UpdateVideo(VideoDto video)
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Video", video);
            result.EnsureSuccessStatusCode();
            await JsRuntime.ShowSuccessToast($"Video updated success.");
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast($"Video update error: {e.Message}.");

        }
    }

    private async Task DeleteVideo(VideoDto video)
    {
        try
        {
            var result = await Http.DeleteAsync($"api/Video/{video.Id}");
            await JsRuntime.ShowSuccessToast($"Video delete success.");

            result.EnsureSuccessStatusCode();
            Videos.Remove(video);
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast($"Video delete error: {e.Message}.");

        }
    }

}