@page "/video"

@rendermode InteractiveWebAssembly

@attribute [Authorize]
@attribute [StreamRendering]
@implements IAsyncDisposable

@if (RendererInfo.IsInteractive)
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Tiêu đề</th>
                <th scope="col">Thể loại</th>
                <th scope="col">Chất lượng</th>
                @* <th scope="col">Trạng thái</th> *@
                <th scope="col">Chia sẻ</th>
                <th scope="col">Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var video in Videos)
            {
                <tr scope="row">
                    <td>
                        <InputText @bind-Value="video.Title" class="form-control" />
                    </td>

                    <td>
                        <InputSelect class="form-select" @bind-Value="@video.Type">
                            @foreach (var value in Enum.GetValues<VideoEnum.VideoType>())
                            {
                                <option value="@value">@value.GetDescription()</option>
                            }
                        </InputSelect>
                    </td>

                    <td>
                        @{
                            var content = string.Join(",", video.VideoStreams.OrderBy(x => x.Resolution).Select(x => x.Resolution.GetDescription()));
                            if (string.IsNullOrEmpty(content)) content = "Đợi xử lý";
                        }
                        <text>@content</text>
                    </td>

                    @* <td>@video.Status.GetDescription()</td> *@

                    <td>
                        @if (video.CanPlay)
                        {
                            <InputSelect class="form-select" @bind-Value="@video.ShareType">
                                @foreach (var value in Enum.GetValues<VideoEnum.VideoShareType>())
                                {
                                    <option value="@value">@value.GetDescription()</option>
                                }
                            </InputSelect>
                        }
                        else
                        {
                            <p class="p">Đợi xử lý</p>
                        }
                    </td>

                    <td>
                        <div class="btn-group" role="group" aria-label="Action">
                            @if (video.CanPlay)
                            {
                                <button type="button" class="btn btn-primary text-white" @onclick="() => PlayVideo(video)" disabled="@(!video.CanPlay)">Play</button>
                                <button type="button" class="btn btn-success">
                                    @{
                                        var shareUrl = $"/video-share/{video.Id}";
                                    }
                                    <NavLink href="@shareUrl" target="_blank" class="text-white link-offset-2 link-offset-3-hover link-underline link-underline-opacity-0 link-underline-opacity-75-hover">Share</NavLink>
                                </button>
                            }
                            @if (video.CanUpscale)
                            {
                                var upscaleUrl = "/video-upscale/" + video.Id;
                                <button class="btn btn-warning text-white" @onclick="@(() => JsRuntime.NavigateTo(upscaleUrl))">
                                    Upscale
                                </button>
                            }
                            <button type="button" class="btn btn-info text-white" @onclick="() => UpdateVideo(video)">Update</button>
                            <button type="button" class="btn btn-danger text-white" @onclick="() => DeleteVideo(video)">Delete</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row d-flex justify-content-center">
        <div class="col-6">
            <div id="player"></div>
        </div>
    </div>
}


else
{
    <p>Wait for interactive...</p>
}

@code {
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] public HttpClient Http { get; set; } = null!;
    private List<VideoDto> Videos { get; set; } = [];
    private HubConnection? _hubConnection;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Videos = await Http.GetFromJsonAsync<List<VideoDto>>("api/Video") ?? [];
            StateHasChanged();

            var url = await JsRuntime.GetOrigin();

            var hubUrl = Path.Combine(url, "hubs", "VideoHub").Replace("\\", "/");

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl, options =>
                {
                    options.AccessTokenProvider = () => Http.GetStringAsync("/access-token")!;
                })
                .Build();

            _hubConnection.On<string>(nameof(IVideoHubAction.ReceiveMessage), async (message) =>
            {
                Console.WriteLine(message);
                await JsRuntime.ShowErrorToast(message);
            });
            try
            {
                await _hubConnection.StartAsync();

                await _hubConnection.SendAsync("SendMessage");
            }
            catch (Exception e)
            {
                await JsRuntime.ShowErrorToast($"Lỗi kết nối đến server: {e.Message}");
            }
        }
    }


    private async Task PlayVideo(VideoDto video)
    {
        await JsRuntime.InvokeVoidAsync("playVideo", "player", video.M3U8Location);
    }

    private async Task UpdateVideo(VideoDto video)
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Video", video);
            result.EnsureSuccessStatusCode();
            await JsRuntime.ShowSuccessToast($"Cập nhật thành công");
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast($"Cập nhật lỗi: {e.Message}.");
        }
    }

    private async Task DeleteVideo(VideoDto video)
    {
        try
        {
            var result = await Http.DeleteAsync($"api/Video/{video.Id}");
            await JsRuntime.ShowSuccessToast($"Video xóa thành công.");

            result.EnsureSuccessStatusCode();
            Videos.Remove(video);
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast($"Video xóa lỗi: {e.Message}!");

        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null) await _hubConnection.DisposeAsync();
    }

}