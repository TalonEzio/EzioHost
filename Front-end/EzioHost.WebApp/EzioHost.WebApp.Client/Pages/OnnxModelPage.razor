@page "/onnx"
@rendermode InteractiveServer
<PageTitle>Onnx Model</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="https://unpkg.com/slick-image-compare/dist/slick-image-compare.css">
    <link rel="stylesheet" href="https://unpkg.com/beerslider/dist/BeerSlider.css">
</HeadContent>

<h3 class="h3 mb-2">Onnx Models</h3>
<button class="  mb-2 btn btn-primary" type="button"><NavLink href="onnx-create" class="text-white">Create new</NavLink></button>
@if (RendererInfo.IsInteractive)
{

    if (OnnxModels.Any())
    {

        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Scale</th>
                    <th>Precision</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>

                @foreach (var onnxModel in OnnxModels)
                {
                    <tr>
                        <td>@onnxModel.Name</td>
                        <td>
                            @onnxModel.Scale
                        </td>
                        <td>@onnxModel.Precision</td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Action">
                                <button type="button" class="btn btn-primary" @onclick="@(()=> OnPreviewClicked(onnxModel))">Preview</button>
                                <button type="button" class="btn btn-primary" @onclick="(() => OnDeleteModelClicked(onnxModel))">Delete</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (!string.IsNullOrEmpty(_beforeImage) && !string.IsNullOrEmpty(_afterImage))
        {
            <div class="row d-flex justify-content-center">
                <div class="col-6">
                    <ImageCompare @ref="ImageCompare" BeforeImage="@_beforeImage" AfterImage="@_afterImage" />
                </div>
            </div>
        }
        else
        {
            if (_selectedOnnxModelDto != null)
            {
                <h4 class="h4 mb-2">Selected: @_selectedOnnxModelDto.Name</h4>
                <InputFile OnChange="OnDemoInputFileChanged" accept=".jpg,.png" class="form-control  mb-2" />

                <button type="button" class="btn btn-primary mb-2" @onclick=@(() => OnTestUpscaleClicked(_selectedDemoInputFile,_selectedOnnxModelDto))>Test</button>
            }
            else
            {
                <p>Please select model to test</p>
            }
        }
    }
    else
    {
        <p>@_message</p>
    }
}
@code {
    public List<OnnxModelDto> OnnxModels { get; set; } = [];

    private string _message = "Waiting for data...";
    private string _beforeImage = string.Empty;
    private string _afterImage = string.Empty;

    private OnnxModelDto? _selectedOnnxModelDto;
    private IBrowserFile? _selectedDemoInputFile;

    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    public ImageCompare? ImageCompare { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await HttpClient.GetFromJsonAsync<List<OnnxModelDto>>("api/OnnxModel");

            if (response != null && response.Any())
            {
                OnnxModels.AddRange(response);
            }
            else
            {
                _message = "No ONNX model!";
            }
            StateHasChanged();

        }
    }

    private async Task OnPreviewClicked(OnnxModelDto onnxModel)
    {
        _beforeImage = onnxModel.DemoInput;
        _afterImage = onnxModel.DemoOutput;

        _selectedOnnxModelDto = onnxModel;

        if (ImageCompare != null)
        {
            await ImageCompare.ReDraw(_beforeImage,_afterImage);
        }
        StateHasChanged();
    }

    private async Task OnDeleteModelClicked(OnnxModelDto onnxModel)
    {
        var response = await HttpClient.DeleteAsync($"/api/OnnxModel/{onnxModel.Id}");

        response.EnsureSuccessStatusCode();

        await JsRuntime.ShowSuccessToast($"Delete {onnxModel.Name} done!");

        OnnxModels.Remove(onnxModel);
        StateHasChanged();
    }

    private async Task OnDemoInputFileChanged(InputFileChangeEventArgs arg)
    {
        _selectedDemoInputFile = arg.File;

        if (_selectedDemoInputFile != null)
        {
            var buffer = new byte[_selectedDemoInputFile.Size];
            _ = await _selectedDemoInputFile.OpenReadStream(_selectedDemoInputFile.Size).ReadAsync(buffer);
            _beforeImage = $"data:{_selectedDemoInputFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

            StateHasChanged();
        }
    }

    private async Task OnTestUpscaleClicked(IBrowserFile? inputFile, OnnxModelDto? onnxModel)
    {
        if (inputFile == null || onnxModel == null)
        {
            await JsRuntime.ShowErrorToast("Need input!");
            return;
        }

        var formContent = new MultipartFormDataContent();

        var imageStream = inputFile.OpenReadStream(inputFile.Size);

        formContent.Add(new StreamContent(imageStream), "imageFile", fileName: inputFile.Name);

        try
        {
            var response = await HttpClient.PostAsync($"/api/OnnxModel/demo/{onnxModel.Id}", formContent);

            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadFromJsonAsync<UpscaleDemoResponseDto>();

            if (content != null)
            {
                _beforeImage = content.DemoInput;
                _afterImage = content.DemoOutput;

                var model = OnnxModels.FirstOrDefault(x => x.Id == content.ModelId);
                if (model != null)
                {
                    model.DemoInput = content.DemoInput;
                    model.DemoOutput = content.DemoOutput;
                }

                _selectedDemoInputFile = null;
                _selectedOnnxModelDto = null;

                await JsRuntime.ShowSuccessToast("Demo upscale done!");
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast(e.Message);
        }
    }

}