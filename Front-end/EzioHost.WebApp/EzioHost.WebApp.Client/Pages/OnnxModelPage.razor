@page "/onnx"
@using System.Diagnostics
@rendermode InteractiveWebAssembly
<PageTitle>Onnx Model</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="https://unpkg.com/slick-image-compare/dist/slick-image-compare.css">
</HeadContent>

<h3 class="h3 mb-2">Onnx Models</h3>

@if (RendererInfo.IsInteractive)
{
    <button class="  mb-2 btn btn-primary" type="button" @onclick=@(() => JsRuntime.NavigateTo("onnx-create"))>
        Create new
    </button>
    if (OnnxModels.Any())
    {
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Scale</th>
                    <th>Precision</th>
                    <th>Action</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var onnxModel in OnnxModels)
                {
                    <tr>
                        <td><InputText @bind-Value="@onnxModel.Name" class="form-control"></InputText></td>
                        <td>
                            <InputNumber @bind-Value="@onnxModel.Scale" class="form-control" min="1" max="4"></InputNumber>
                        </td>
                        <td>
                            <InputSelect @bind-Value="@onnxModel.Precision" class="form-select">
                                @foreach (var precision in Enum.GetValues<OnnxModelPrecision>())
                                {
                                    <option value="@precision">@precision.GetDescription()</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <div class="btn-group" role="group" aria-label="Action">
                                <button type="button" class="btn btn-success" @onclick="@(() => OnPreviewClicked(onnxModel))">Preview</button>
                                @if (onnxModel.CanPreview)
                                {
                                    <button type="button" class="btn btn-info text-white" @onclick="@(() => OnRemovePreviewClicked(onnxModel))">Xóa Preview</button>

                                }
                                <button type="button" class="btn btn-danger" @onclick="() => OnDeleteModelClicked(onnxModel)">Xóa</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        @if (!string.IsNullOrEmpty(_beforeImage) && !string.IsNullOrEmpty(_afterImage))
        {
            <div class="row d-flex justify-content-center">
                <div class="col-8">
                    <ImageCompare @ref="ImageCompare" BeforeImage="@_beforeImage" AfterImage="@_afterImage" />
                </div>
            </div>
        }
        else
        {
            if (_selectedOnnxModelDto != null)
            {
                <h4 class="h4 mb-2">Selected: @_selectedOnnxModelDto.Name</h4>
                @if (_upscaling)
                {
                    <p>Đang upscale, vui lòng chờ...</p>
                }
                else
                {
                    <InputFile OnChange="OnDemoInputFileChanged" accept=".jpg,.png" class="form-control  mb-2" />
                    <button type="button" class="btn btn-secondary mb-2" @onclick=@(() => OnTestUpscaleClicked(_selectedDemoInputFile, _selectedOnnxModelDto))>Test</button>
                }
            }
            else
            {
                <h4 class="h4">Please select model to test</h4>
            }
        }
    }
    else
    {
        <p>@_message</p>
    }
}

@code {
    public List<OnnxModelDto> OnnxModels { get; set; } = [];

    private string _message = "Waiting for data...";
    private string _beforeImage = string.Empty;
    private string _afterImage = string.Empty;

    bool _upscaling;

    private OnnxModelDto? _selectedOnnxModelDto;
    private IBrowserFile? _selectedDemoInputFile;

    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] public HttpClient HttpClient { get; set; } = null!;
    public ImageCompare? ImageCompare { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await HttpClient.GetFromJsonAsync<List<OnnxModelDto>>("api/OnnxModel");

            if (response != null && response.Any())
            {
                OnnxModels.AddRange(response);
            }
            else
            {
                _message = "No ONNX model!";
            }

            StateHasChanged();
        }
    }

    private async Task OnPreviewClicked(OnnxModelDto onnxModel)
    {
        _beforeImage = onnxModel.DemoInput;
        _afterImage = onnxModel.DemoOutput;

        _selectedOnnxModelDto = onnxModel;

        if (ImageCompare != null)
        {
            await ImageCompare.ReDraw(_beforeImage, _afterImage);
        }

        StateHasChanged();
    }

    private async Task OnDeleteModelClicked(OnnxModelDto onnxModel)
    {
        var response = await HttpClient.DeleteAsync($"/api/OnnxModel/{onnxModel.Id}");

        response.EnsureSuccessStatusCode();

        await JsRuntime.ShowSuccessToast($"Xóa {onnxModel.Name} thành công!");

        OnnxModels.Remove(onnxModel);
        StateHasChanged();
    }

    private async Task OnDemoInputFileChanged(InputFileChangeEventArgs arg)
    {
        _selectedDemoInputFile = arg.File;

        if (_selectedDemoInputFile != null)
        {
            var buffer = new byte[_selectedDemoInputFile.Size];
            _ = await _selectedDemoInputFile.OpenReadStream(_selectedDemoInputFile.Size).ReadAsync(buffer);
            _beforeImage = $"data:{_selectedDemoInputFile.ContentType};base64,{Convert.ToBase64String(buffer)}";

            StateHasChanged();
        }
    }

    private async Task OnTestUpscaleClicked(IBrowserFile? inputFile, OnnxModelDto? onnxModel)
    {
        if (inputFile == null || onnxModel == null)
        {
            await JsRuntime.ShowErrorToast("Vui lòng chọn đầu vào!");
            return;
        }

        _upscaling = true;
        StateHasChanged();

        var formContent = new MultipartFormDataContent();

        var imageStream = inputFile.OpenReadStream(inputFile.Size);

        formContent.Add(new StreamContent(imageStream), "imageFile", inputFile.Name);

        try
        {
            var response = await HttpClient.PostAsync($"/api/OnnxModel/demo/{onnxModel.Id}", formContent);

            response.EnsureSuccessStatusCode();

            var content = await response.Content.ReadFromJsonAsync<UpscaleDemoResponseDto>();

            if (content != null)
            {
                _beforeImage = content.DemoInput;
                _afterImage = content.DemoOutput;

                var model = OnnxModels.FirstOrDefault(x => x.Id == content.ModelId);
                if (model != null)
                {
                    model.DemoInput = content.DemoInput;
                    model.DemoOutput = content.DemoOutput;
                }

                _selectedDemoInputFile = null;
                _selectedOnnxModelDto = null;

                await JsRuntime.ShowSuccessToast($"Upscale thử thành công, hết: {content.ElapsedMilliseconds}ms!");
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast(e.Message);
        }
        finally
        {
            _upscaling = false;
            StateHasChanged();
        }
    }

    private async Task OnRemovePreviewClicked(OnnxModelDto onnxModel)
    {
        try
        {
            onnxModel.DemoInput = onnxModel.DemoOutput = string.Empty;
            _beforeImage = _afterImage = string.Empty;

            var response = await HttpClient.PostAsync($"/api/OnnxModel/demo-reset/{onnxModel.Id}", null);

            response.EnsureSuccessStatusCode();
            await JsRuntime.ShowSuccessToast($"Xóa preview cho {onnxModel.Name} thành công!");
            StateHasChanged();
        }
        catch (Exception e)
        {
            await JsRuntime.ShowErrorToast($"Xóa preview lỗi, vui long thử lại. {e.Message}");
        }
    }

}