@page "/upload-video"
@using static Shared.Common.UploadConstants
@inject HttpClient HttpClient
@rendermode InteractiveServer
@attribute [Authorize]

@if (RendererInfo.IsInteractive)
{
    <div class="upload-container">
        <h3>Upload Videos</h3>

        <div class="upload-box">
            <InputFile class="form-control" OnChange="OnFilesChange" multiple id="@INPUT_FILE_ID" accept=".mp4,.mkv,.avi" />
        </div>

        @if (_fileUploads.Any())
        {
            <div class="file-list mt-4">
                <h5>Selected Files</h5>

                @foreach (var fileUpload in _fileUploads)
                {
                    <div class="file-item">
                        <div class="file-info">
                            <span class="file-name">@fileUpload.File.Name</span>
                            <span class="file-size">(@(Math.Round(fileUpload.File.Size / (1024.0 * 1024), 2)) MB)</span>
                        </div>

                        <div class="file-controls">
                            @* <select class="form-select" @bind="fileUpload.FileType">
                                @foreach (var type in Enum.GetValues(typeof(VideoEnum.VideoType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </select> *@

                            <div class="progress-container">
                                <progress max="100" value="@fileUpload.Progress"></progress>
                                <span class="progress-text">@fileUpload.Progress%</span>
                                <span class="speed-text">@fileUpload.Speed KB/s</span>
                            </div>

                            <button class="btn btn-sm btn-danger" @onclick="() => RemoveFile(fileUpload)">
                                <i class="bi bi-x">X</i>
                            </button>
                        </div>
                    </div>
                }

                <div class="upload-actions mt-3">
                    <button class="btn btn-primary" disabled="@_isUploading" @onclick="HandleUploadAllFiles">
                        <i class="bi bi-upload"></i> Upload All Files
                    </button>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Waiting for interactive mode...</p>
}

@code {
    private const string INPUT_FILE_ID = "fileInput";

    private bool _isUploading;

    [Inject] public ILogger<UploadVideoPage> Logger { get; set; } = null!;
    [Inject] public IJSRuntime JsRuntime { get; set; } = null!;

    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; } = null!;
    private AuthenticationState _authenticationState = null!;

    private readonly List<FileUploadItem> _fileUploads = [];

    protected override async Task OnInitializedAsync()
    {
        _authenticationState = await AuthenticationStateTask;
    }

    private Task OnFilesChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            _fileUploads.Add(new FileUploadItem
                {
                    File = file,
                    FileType = VideoEnum.VideoType.Other,
                    Progress = 0,
                    Speed = 0
                });
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private void RemoveFile(FileUploadItem fileUpload)
    {
        _fileUploads.Remove(fileUpload);
        StateHasChanged();
    }

    private async Task HandleUploadAllFiles()
    {
        if (!_fileUploads.Any()) return;

        _isUploading = true;
        StateHasChanged();

        var uploadTasks = _fileUploads.Select(UploadSingleFile);
        await Task.WhenAll(uploadTasks);

        _isUploading = false;
        StateHasChanged();
    }

    private async Task UploadSingleFile(FileUploadItem fileUpload, int index)
    {
        var fileStream = new SeekableFileStream(JsRuntime, INPUT_FILE_ID, index, fileUpload.File.Size);
        var fileInfo = await InitUploadAsync(fileUpload, fileStream);

        if (fileInfo.IsCompleted)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"File {fileInfo.FileName} already uploaded");
            fileUpload.Progress = 100;
            StateHasChanged();
            return;
        }

        fileStream.Seek(fileInfo.UploadedBytes, SeekOrigin.Begin);

        var buffer = new byte[ChunkSize];

        long totalBytesRead = fileInfo.UploadedBytes, totalBytes = fileUpload.File.Size;

        while (totalBytesRead < totalBytes)
        {
            var startChunkTime = DateTime.UtcNow;
            var chunkBytesRead = 0;

            while (chunkBytesRead < ChunkSize)
            {
                var readCount = Math.Min(BufferSize, ChunkSize - chunkBytesRead);
                var bytesRead = await fileStream.ReadAsync(buffer, chunkBytesRead, readCount, CancellationToken.None);
                if (bytesRead == 0) break;
                chunkBytesRead += bytesRead;
            }

            totalBytesRead += chunkBytesRead;

            var content = new MultipartFormDataContent
            {
                { new ByteArrayContent(buffer, 0, chunkBytesRead), "chunkFile", fileUpload.File.Name },
            };

            await HttpClient.PostAsync($"api/upload/chunk/{fileInfo.Id}", content);

            var elapsedSeconds = (DateTime.UtcNow - startChunkTime).TotalSeconds;

            var minTimeForChunk = ChunkSize / MaxUploadSpeed;
            var remainingTime = minTimeForChunk - elapsedSeconds;

            if (remainingTime > 0)
            {
                await Task.Delay(TimeSpan.FromSeconds(remainingTime));
            }

            var totalChunkTime = (DateTime.UtcNow - startChunkTime).TotalSeconds;
            if (totalChunkTime > 0)
            {
                fileUpload.Speed = Math.Round((chunkBytesRead / 1024.0) / totalChunkTime, 2);
            }

            fileUpload.Progress = (int)(totalBytesRead * 100.0 / totalBytes);
            StateHasChanged();
        }

        await fileStream.DisposeAsync();
        fileUpload.Progress = 100;
        StateHasChanged();
    }

    private static async Task<string> ComputeFileFingerprintAsync(SeekableFileStream file)
    {
        using var sha256 = SHA256.Create();

        const int chunkSize = 512 * 1024; // 512KB
        var bufferSize = (int)Math.Min(chunkSize, file.Length);
        var buffer = new byte[bufferSize];

        _ = await file.ReadAsync(buffer, 0, bufferSize);

        sha256.TransformBlock(buffer, 0, bufferSize, buffer, 0);
        sha256.TransformFinalBlock([], 0, 0);

        var hashBytes = sha256.Hash!;
        return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
    }

    private async Task<UploadInfoDto> InitUploadAsync(FileUploadItem fileUpload, SeekableFileStream fileStream)
    {
        var fileChecksum = await ComputeFileFingerprintAsync(fileStream);

        var metadata = new UploadInfoDto
            {
                FileName = fileUpload.File.Name,
                FileSize = fileUpload.File.Size,
                ContentType = fileUpload.File.ContentType,
                Checksum = fileChecksum,
                Type = fileUpload.FileType,
                UserId = _authenticationState.GetUserId()
            };

        var response = await HttpClient.PostAsJsonAsync("api/upload/init", metadata);
        response.EnsureSuccessStatusCode();

        var uploadInfo = await response.Content.ReadFromJsonAsync<UploadInfoDto>();
        return uploadInfo!;
    }

    private class FileUploadItem
    {
        public IBrowserFile File { get; init; } = null!;
        public VideoEnum.VideoType FileType { get; set; }
        public int Progress { get; set; }
        public double Speed { get; set; }
    }
}
