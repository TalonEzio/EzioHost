<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    @* <link rel="stylesheet" href="@Assets["lib/bootstrap/dist/css/bootstrap.min.css"]" /> *@
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.11.0/dist/sweetalert2.min.css" rel="stylesheet">


    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["EzioHost.WebApp.styles.css"]" />
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />

    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>
    <script src="playerjs.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.onmouseenter = window.Swal.stopTimer;
                toast.onmouseleave = window.Swal.resumeTimer;
            }
        });

        window.showToast = function (type, message) {
            Toast.fire({
                icon: type, // 'success', 'error', 'info', 'warning', 'question'
                title: message
            });
        };
    </script>

    <script>
        window.readFileSlice = function (inputFileId, fileIndex, offset, count, dotNetReference) {
            return new Promise((resolve, reject) => {
                const inputFile = document.getElementById(inputFileId);
                if (!inputFile || !inputFile.files || inputFile.files.length <= fileIndex) {
                    reject("File not found.");
                    return;
                }

                const file = inputFile.files[fileIndex];
                const slice = file.slice(offset, offset + count);

                const reader = new FileReader();
                reader.onload = function (event) {
                    const byteArray = new Uint8Array(event.target.result);
                    dotNetReference.invokeMethodAsync('ReceiveFileSlice', offset, byteArray);
                    resolve();
                };
                reader.onerror = function (event) {
                    reject(event.target.error);
                };
                reader.readAsArrayBuffer(slice);
                console.log(slice);
            });
        };
        window.playVideo = function(id, videoUrl) {
            console.log(videoUrl);
            const player = new window.Playerjs({
                id: id,
                file: videoUrl,
                hls:1
            });
        }

    </script>

</body>

</html>
